{"ast":null,"code":"var _jsxFileName = \"C:\\\\All Project\\\\Flutter_projects\\\\food Recomendation\\\\DiaFit-master\\\\components\\\\medicationReminder.jsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Calendar } from 'react-native-calendars';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MedicalReminder() {\n  const [selectedDates, setSelectedDates] = useState({});\n  const handleDateSelect = date => {\n    const updatedDates = Object.assign({}, selectedDates);\n    if (updatedDates[date]) {\n      delete updatedDates[date];\n    } else {\n      updatedDates[date] = {\n        selected: true,\n        marked: true\n      };\n    }\n    setSelectedDates(updatedDates);\n  };\n  const currentDate = new Date().toISOString().split('T')[0];\n  return _jsxDEV(View, {\n    children: _jsxDEV(Calendar, {\n      current: currentDate,\n      markedDates: selectedDates,\n      onDayPress: day => handleDateSelect(day.dateString)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"names":["React","useState","View","Calendar","jsxDEV","_jsxDEV","MedicalReminder","selectedDates","setSelectedDates","handleDateSelect","date","updatedDates","Object","assign","selected","marked","currentDate","Date","toISOString","split","children","current","markedDates","onDayPress","day","dateString","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/All Project/Flutter_projects/food Recomendation/DiaFit-master/components/medicationReminder.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View } from 'react-native';\nimport { Calendar } from 'react-native-calendars';\n\nexport default function MedicalReminder() {\n    const [selectedDates, setSelectedDates] = useState({});\n\n    const handleDateSelect = (date) => {\n        const updatedDates = { ...selectedDates };\n        if (updatedDates[date]) {\n            // If date is already selected, unselect it\n            delete updatedDates[date];\n        } else {\n            // If date is not selected, add it to the selected dates\n            updatedDates[date] = { selected: true, marked: true };\n        }\n        setSelectedDates(updatedDates);\n    };\n\n    // Convert current date to ISO string format\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    return (\n        <View>\n            <Calendar\n                current={currentDate} // Pass the string representation of the current date\n                markedDates={selectedDates}\n                onDayPress={(day) => handleDateSelect(day.dateString)}\n            />\n        </View>\n    );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAExC,SAASC,QAAQ,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,eAAe,SAASC,eAAeA,CAAA,EAAG;EACtC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtD,MAAMQ,gBAAgB,GAAIC,IAAI,IAAK;IAC/B,MAAMC,YAAY,GAAAC,MAAA,CAAAC,MAAA,KAAQN,aAAa,CAAE;IACzC,IAAII,YAAY,CAACD,IAAI,CAAC,EAAE;MAEpB,OAAOC,YAAY,CAACD,IAAI,CAAC;IAC7B,CAAC,MAAM;MAEHC,YAAY,CAACD,IAAI,CAAC,GAAG;QAAEI,QAAQ,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAK,CAAC;IACzD;IACAP,gBAAgB,CAACG,YAAY,CAAC;EAClC,CAAC;EAGD,MAAMK,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAE1D,OACId,OAAA,CAACH,IAAI;IAAAkB,QAAA,EACDf,OAAA,CAACF,QAAQ;MACLkB,OAAO,EAAEL,WAAY;MACrBM,WAAW,EAAEf,aAAc;MAC3BgB,UAAU,EAAGC,GAAG,IAAKf,gBAAgB,CAACe,GAAG,CAACC,UAAU;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}