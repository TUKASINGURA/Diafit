{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { ContinousBaseGesture } from './gesture';\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  let changePayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force\n    };\n  }\n  return Object.assign({}, current, changePayload);\n}\nexport class ForceTouchGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    _defineProperty(this, \"config\", {});\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n  minForce(force) {\n    this.config.minForce = force;\n    return this;\n  }\n  maxForce(force) {\n    this.config.maxForce = force;\n    return this;\n  }\n  feedbackOnActivation(value) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","forceChange","force","Object","assign","ForceTouchGesture","constructor","_defineProperty","handlerName","minForce","config","maxForce","feedbackOnActivation","value","onChange","callback","handlers"],"sources":["C:\\All Project\\Flutter_projects\\food Recomendation\\DiaFit-master\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\forceTouchGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  ForceTouchGestureConfig,\n  ForceTouchGestureHandlerEventPayload,\n} from '../ForceTouchGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  /**\n   * A minimal pressure that is required before gesture can activate.\n   * Should be a value from range [0.0, 1.0]. Default is 0.2.\n   * @param force\n   */\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  /**\n   * A maximal pressure that could be applied for gesture.\n   * If the pressure is greater, gesture fails. Should be a value from range [0.0, 1.0].\n   * @param force\n   */\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  /**\n   * Value defining if haptic feedback has to be performed on activation.\n   * @param value\n   */\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"],"mappings":";;;;;;;;;;;;;AAAA,SAA4BA,oBAA5B,QAAwD,WAAxD;AAWA,SAASC,qBAATA,CACEC,OADF,EAEEC,QAFF,EAGE;EACA;;EACA,IAAIC,aAAJ;EACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1BD,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK;IADP,CAAhB;EAGD,CAJD,MAIO;IACLH,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK,KAAR,GAAgBJ,QAAQ,CAACI;IADxB,CAAhB;EAGD;EAED,OAAAC,MAAA,CAAAC,MAAA,KAAYP,OAAL,EAAiBE,aAAA;AACzB;AAED,OAAO,MAAMM,iBAAN,SAAgCV,oBAAhC,CAGL;EAGAW,WAAWA,CAAA,EAAG;IACZ;IADYC,eAAA,iBAF+C,EAE/C;IAGZ,KAAKC,WAAL,GAAmB,0BAAnB;EACD;EAODC,QAAQA,CAACP,KAAD,EAAgB;IACtB,KAAKQ,MAAL,CAAYD,QAAZ,GAAuBP,KAAvB;IACA,OAAO,IAAP;EACD;EAODS,QAAQA,CAACT,KAAD,EAAgB;IACtB,KAAKQ,MAAL,CAAYC,QAAZ,GAAuBT,KAAvB;IACA,OAAO,IAAP;EACD;EAMDU,oBAAoBA,CAACC,KAAD,EAAiB;IACnC,KAAKH,MAAL,CAAYE,oBAAZ,GAAmCC,KAAnC;IACA,OAAO,IAAP;EACD;EAEDC,QAAQA,CACNC,QADM,EASN;IAEA,KAAKC,QAAL,CAAcpB,qBAAd,GAAsCA,qBAAtC;IACA,OAAO,MAAMkB,QAAN,CAAeC,QAAf,CAAP;EACD;AAnDD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}